!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!x[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--g&&0===y&&_()}(e,n),t&&t(e,n)};var n,r=!0,o="907cd67f7761f536724c",i=1e4,s={},a=[],c=[];function l(e){var t=k[e];if(!t)return S;var r=function(r){return t.hot.active?(k[r]?-1===k[r].parents.indexOf(e)&&k[r].parents.push(e):(a=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),a=[]),S(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return S[e]},set:function(t){S[e]=t}}};for(var i in S)Object.prototype.hasOwnProperty.call(S,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===p&&d("prepare"),y++,S.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===p&&(v[e]||E(e),0===y&&0===g&&_())}},r.t=function(e,t){return 1&t&&(e=r(e)),S.t(e,-2&t)},r}var u=[],p="idle";function d(e){p=e;for(var t=0;t<u.length;t++)u[t].call(null,e)}var f,h,m,g=0,y=0,v={},b={},x={};function w(e){return+e+""===e?+e:e}function T(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return r=e,d("check"),(t=i,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=S.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return d("idle"),null;b={},v={},x=e.c,m=e.h,d("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});h={};return E(0),"prepare"===p&&0===y&&0===g&&_(),t});var t}function E(e){x[e]?(b[e]=!0,g++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=S.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):v[e]=!0}function _(){d("ready");var e=f;if(f=null,e)if(r)Promise.resolve().then(function(){return C(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(w(n));e.resolve(t)}}function C(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,r,i,c,l;function u(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),i=o.id,s=o.chain;if((c=k[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var a=0;a<c.parents.length;a++){var l=c.parents[a],u=k[l];if(u){if(u.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([l]),moduleId:i,parentId:l};-1===t.indexOf(l)&&(u.hot._acceptedDependencies[i]?(n[l]||(n[l]=[]),f(n[l],[i])):(delete n[l],t.push(l),r.push({chain:s.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var g={},y=[],v={},b=function(){console.warn("[HMR] unexpected require("+E.moduleId+") to disposed module")};for(var T in h)if(Object.prototype.hasOwnProperty.call(h,T)){var E;l=w(T);var _=!1,C=!1,D=!1,j="";switch((E=h[T]?u(l):{type:"disposed",moduleId:T}).chain&&(j="\nUpdate propagation: "+E.chain.join(" -> ")),E.type){case"self-declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(_=new Error("Aborted because of self decline: "+E.moduleId+j));break;case"declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(_=new Error("Aborted because of declined dependency: "+E.moduleId+" in "+E.parentId+j));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(E),t.ignoreUnaccepted||(_=new Error("Aborted because "+l+" is not accepted"+j));break;case"accepted":t.onAccepted&&t.onAccepted(E),C=!0;break;case"disposed":t.onDisposed&&t.onDisposed(E),D=!0;break;default:throw new Error("Unexception type "+E.type)}if(_)return d("abort"),Promise.reject(_);if(C)for(l in v[l]=h[l],f(y,E.outdatedModules),E.outdatedDependencies)Object.prototype.hasOwnProperty.call(E.outdatedDependencies,l)&&(g[l]||(g[l]=[]),f(g[l],E.outdatedDependencies[l]));D&&(f(y,[E.moduleId]),v[l]=b)}var A,N=[];for(r=0;r<y.length;r++)l=y[r],k[l]&&k[l].hot._selfAccepted&&N.push({module:l,errorHandler:k[l].hot._selfAccepted});d("dispose"),Object.keys(x).forEach(function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)});for(var O,I,$=y.slice();$.length>0;)if(l=$.pop(),c=k[l]){var P={},L=c.hot._disposeHandlers;for(i=0;i<L.length;i++)(n=L[i])(P);for(s[l]=P,c.hot.active=!1,delete k[l],delete g[l],i=0;i<c.children.length;i++){var q=k[c.children[i]];q&&((A=q.parents.indexOf(l))>=0&&q.parents.splice(A,1))}}for(l in g)if(Object.prototype.hasOwnProperty.call(g,l)&&(c=k[l]))for(I=g[l],i=0;i<I.length;i++)O=I[i],(A=c.children.indexOf(O))>=0&&c.children.splice(A,1);for(l in d("apply"),o=m,v)Object.prototype.hasOwnProperty.call(v,l)&&(e[l]=v[l]);var H=null;for(l in g)if(Object.prototype.hasOwnProperty.call(g,l)&&(c=k[l])){I=g[l];var M=[];for(r=0;r<I.length;r++)if(O=I[r],n=c.hot._acceptedDependencies[O]){if(-1!==M.indexOf(n))continue;M.push(n)}for(r=0;r<M.length;r++){n=M[r];try{n(I)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:l,dependencyId:I[r],error:e}),t.ignoreErrored||H||(H=e)}}}for(r=0;r<N.length;r++){var R=N[r];l=R.module,a=[l];try{S(l)}catch(e){if("function"==typeof R.errorHandler)try{R.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:n,originalError:e}),t.ignoreErrored||H||(H=n),H||(H=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:l,error:e}),t.ignoreErrored||H||(H=e)}}return H?(d("fail"),Promise.reject(H)):(d("idle"),new Promise(function(e){e(y)}))}var k={};function S(t){if(k[t])return k[t].exports;var r=k[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:T,apply:C,status:function(e){if(!e)return p;u.push(e)},addStatusHandler:function(e){u.push(e)},removeStatusHandler:function(e){var t=u.indexOf(e);t>=0&&u.splice(t,1)},data:s[e]};return n=void 0,t}(t),parents:(c=a,a=[],c),children:[]};return e[t].call(r.exports,r,r.exports,l(t)),r.l=!0,r.exports}S.m=e,S.c=k,S.d=function(e,t,n){S.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},S.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},S.t=function(e,t){if(1&t&&(e=S(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(S.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)S.d(n,r,function(t){return e[t]}.bind(null,r));return n},S.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return S.d(t,"a",t),t},S.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},S.p="",S.h=function(){return o},l("./src/index.js")(S.s="./src/index.js")}({"./node_modules/jquery/dist/jquery.js":function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,o){"use strict";var i=[],s=n.document,a=Object.getPrototypeOf,c=i.slice,l=i.concat,u=i.push,p=i.indexOf,d={},f=d.toString,h=d.hasOwnProperty,m=h.toString,g=m.call(Object),y={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},b=function(e){return null!=e&&e===e.window},x={type:!0,src:!0,noModule:!0};function w(e,t,n){var r,o=(t=t||s).createElement("script");if(o.text=e,n)for(r in x)n[r]&&(o[r]=n[r]);t.head.appendChild(o).parentNode.removeChild(o)}function T(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[f.call(e)]||"object":typeof e}var E=function(e,t){return new E.fn.init(e,t)},_=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(e){var t=!!e&&"length"in e&&e.length,n=T(e);return!v(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}E.fn=E.prototype={jquery:"3.3.1",constructor:E,length:0,toArray:function(){return c.call(this)},get:function(e){return null==e?c.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(e){return this.pushStack(E.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(c.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:i.sort,splice:i.splice},E.extend=E.fn.extend=function(){var e,t,n,r,o,i,s=arguments[0]||{},a=1,c=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||v(s)||(s={}),a===c&&(s=this,a--);a<c;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(r=e[t])&&(l&&r&&(E.isPlainObject(r)||(o=Array.isArray(r)))?(o?(o=!1,i=n&&Array.isArray(n)?n:[]):i=n&&E.isPlainObject(n)?n:{},s[t]=E.extend(l,i,r)):void 0!==r&&(s[t]=r));return s},E.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==f.call(e))&&(!(t=a(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&m.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){w(e)},each:function(e,t){var n,r=0;if(C(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(_,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?E.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:p.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,s=!n;o<i;o++)!t(e[o],o)!==s&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,s=[];if(C(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&s.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&s.push(o);return l.apply([],s)},guid:1,support:y}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=i[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){d["[object "+t+"]"]=t.toLowerCase()});var k=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,r,o,i,s,a,c,l,u,p,d,f,h,m,g,y,v,b,x="sizzle"+1*new Date,w=e.document,T=0,E=0,_=se(),C=se(),k=se(),S=function(e,t){return e===t&&(p=!0),0},D={}.hasOwnProperty,j=[],A=j.pop,N=j.push,O=j.push,I=j.slice,$=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",q="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",H="\\["+L+"*("+q+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+L+"*\\]",M=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",R=new RegExp(L+"+","g"),W=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),B=new RegExp("^"+L+"*,"+L+"*"),F=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),z=new RegExp(M),X=new RegExp("^"+q+"$"),K={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+M),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},V=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){d()},oe=ve(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{O.apply(j=I.call(w.childNodes),w.childNodes),j[w.childNodes.length].nodeType}catch(e){O={apply:j.length?function(e,t){N.apply(e,I.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ie(e,t,r,o){var i,a,l,u,p,h,y,v=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!o&&((t?t.ownerDocument||t:w)!==f&&d(t),t=t||f,m)){if(11!==T&&(p=J.exec(e)))if(i=p[1]){if(9===T){if(!(l=t.getElementById(i)))return r;if(l.id===i)return r.push(l),r}else if(v&&(l=v.getElementById(i))&&b(t,l)&&l.id===i)return r.push(l),r}else{if(p[2])return O.apply(r,t.getElementsByTagName(e)),r;if((i=p[3])&&n.getElementsByClassName&&t.getElementsByClassName)return O.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!k[e+" "]&&(!g||!g.test(e))){if(1!==T)v=t,y=e;else if("object"!==t.nodeName.toLowerCase()){for((u=t.getAttribute("id"))?u=u.replace(te,ne):t.setAttribute("id",u=x),a=(h=s(e)).length;a--;)h[a]="#"+u+" "+ye(h[a]);y=h.join(","),v=Q.test(e)&&me(t.parentNode)||t}if(y)try{return O.apply(r,v.querySelectorAll(y)),r}catch(e){}finally{u===x&&t.removeAttribute("id")}}}return c(e.replace(W,"$1"),t,r,o)}function se(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function ae(e){return e[x]=!0,e}function ce(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function ue(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function fe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return ae(function(t){return t=+t,ae(function(n,r){for(var o,i=e([],n.length,t),s=i.length;s--;)n[o=i[s]]&&(n[o]=!(r[o]=n[o]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ie.support={},i=ie.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},d=ie.setDocument=function(e){var t,o,s=e?e.ownerDocument||e:w;return s!==f&&9===s.nodeType&&s.documentElement?(h=(f=s).documentElement,m=!i(f),w!==f&&(o=f.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",re,!1):o.attachEvent&&o.attachEvent("onunload",re)),n.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ce(function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Y.test(f.getElementsByClassName),n.getById=ce(function(e){return h.appendChild(e).id=x,!f.getElementsByName||!f.getElementsByName(x).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},y=[],g=[],(n.qsa=Y.test(f.querySelectorAll))&&(ce(function(e){h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+L+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+L+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+x+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||g.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+L+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=Y.test(v=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ce(function(e){n.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),y.push("!=",M)}),g=g.length&&new RegExp(g.join("|")),y=y.length&&new RegExp(y.join("|")),t=Y.test(h.compareDocumentPosition),b=t||Y.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},S=t?function(e,t){if(e===t)return p=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===f||e.ownerDocument===w&&b(w,e)?-1:t===f||t.ownerDocument===w&&b(w,t)?1:u?$(u,e)-$(u,t):0:4&r?-1:1)}:function(e,t){if(e===t)return p=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,s=[e],a=[t];if(!o||!i)return e===f?-1:t===f?1:o?-1:i?1:u?$(u,e)-$(u,t):0;if(o===i)return ue(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[r]===a[r];)r++;return r?ue(s[r],a[r]):s[r]===w?-1:a[r]===w?1:0},f):f},ie.matches=function(e,t){return ie(e,null,null,t)},ie.matchesSelector=function(e,t){if((e.ownerDocument||e)!==f&&d(e),t=t.replace(U,"='$1']"),n.matchesSelector&&m&&!k[t+" "]&&(!y||!y.test(t))&&(!g||!g.test(t)))try{var r=v.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return ie(t,f,null,[e]).length>0},ie.contains=function(e,t){return(e.ownerDocument||e)!==f&&d(e),b(e,t)},ie.attr=function(e,t){(e.ownerDocument||e)!==f&&d(e);var o=r.attrHandle[t.toLowerCase()],i=o&&D.call(r.attrHandle,t.toLowerCase())?o(e,t,!m):void 0;return void 0!==i?i:n.attributes||!m?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},ie.escape=function(e){return(e+"").replace(te,ne)},ie.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ie.uniqueSort=function(e){var t,r=[],o=0,i=0;if(p=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(S),p){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return u=null,e},o=ie.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=ie.selectors={cacheLength:50,createPseudo:ae,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ie.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ie.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+L+")"+e+"("+L+"|$)"))&&_(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var o=ie.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(R," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,c){var l,u,p,d,f,h,m=i!==s?"nextSibling":"previousSibling",g=t.parentNode,y=a&&t.nodeName.toLowerCase(),v=!c&&!a,b=!1;if(g){if(i){for(;m;){for(d=t;d=d[m];)if(a?d.nodeName.toLowerCase()===y:1===d.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?g.firstChild:g.lastChild],s&&v){for(b=(f=(l=(u=(p=(d=g)[x]||(d[x]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]||[])[0]===T&&l[1])&&l[2],d=f&&g.childNodes[f];d=++f&&d&&d[m]||(b=f=0)||h.pop();)if(1===d.nodeType&&++b&&d===t){u[e]=[T,f,b];break}}else if(v&&(b=f=(l=(u=(p=(d=t)[x]||(d[x]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]||[])[0]===T&&l[1]),!1===b)for(;(d=++f&&d&&d[m]||(b=f=0)||h.pop())&&((a?d.nodeName.toLowerCase()!==y:1!==d.nodeType)||!++b||(v&&((u=(p=d[x]||(d[x]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]=[T,b]),d!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ie.error("unsupported pseudo: "+e);return o[x]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ae(function(e,n){for(var r,i=o(e,t),s=i.length;s--;)e[r=$(e,i[s])]=!(n[r]=i[s])}):function(e){return o(e,0,n)}):o}},pseudos:{not:ae(function(e){var t=[],n=[],r=a(e.replace(W,"$1"));return r[x]?ae(function(e,t,n,o){for(var i,s=r(e,null,o,[]),a=e.length;a--;)(i=s[a])&&(e[a]=!(t[a]=i))}):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}}),has:ae(function(e){return function(t){return ie(e,t).length>0}}),contains:ae(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:ae(function(e){return X.test(e||"")||ie.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:fe(!1),disabled:fe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return G.test(e.nodeName)},input:function(e){return V.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=de(t);function ge(){}function ye(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ve(e,t,n){var r=t.dir,o=t.next,i=o||r,s=n&&"parentNode"===i,a=E++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,o);return!1}:function(t,n,c){var l,u,p,d=[T,a];if(c){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,c))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(u=(p=t[x]||(t[x]={}))[t.uniqueID]||(p[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=u[i])&&l[0]===T&&l[1]===a)return d[2]=l[2];if(u[i]=d,d[2]=e(t,n,c))return!0}return!1}}function be(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function xe(e,t,n,r,o){for(var i,s=[],a=0,c=e.length,l=null!=t;a<c;a++)(i=e[a])&&(n&&!n(i,r,o)||(s.push(i),l&&t.push(a)));return s}function we(e,t,n,r,o,i){return r&&!r[x]&&(r=we(r)),o&&!o[x]&&(o=we(o,i)),ae(function(i,s,a,c){var l,u,p,d=[],f=[],h=s.length,m=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)ie(e,t[r],n);return n}(t||"*",a.nodeType?[a]:a,[]),g=!e||!i&&t?m:xe(m,d,e,a,c),y=n?o||(i?e:h||r)?[]:s:g;if(n&&n(g,y,a,c),r)for(l=xe(y,f),r(l,[],a,c),u=l.length;u--;)(p=l[u])&&(y[f[u]]=!(g[f[u]]=p));if(i){if(o||e){if(o){for(l=[],u=y.length;u--;)(p=y[u])&&l.push(g[u]=p);o(null,y=[],l,c)}for(u=y.length;u--;)(p=y[u])&&(l=o?$(i,p):d[u])>-1&&(i[l]=!(s[l]=p))}}else y=xe(y===s?y.splice(h,y.length):y),o?o(null,s,y,c):O.apply(s,y)})}function Te(e){for(var t,n,o,i=e.length,s=r.relative[e[0].type],a=s||r.relative[" "],c=s?1:0,u=ve(function(e){return e===t},a,!0),p=ve(function(e){return $(t,e)>-1},a,!0),d=[function(e,n,r){var o=!s&&(r||n!==l)||((t=n).nodeType?u(e,n,r):p(e,n,r));return t=null,o}];c<i;c++)if(n=r.relative[e[c].type])d=[ve(be(d),n)];else{if((n=r.filter[e[c].type].apply(null,e[c].matches))[x]){for(o=++c;o<i&&!r.relative[e[o].type];o++);return we(c>1&&be(d),c>1&&ye(e.slice(0,c-1).concat({value:" "===e[c-2].type?"*":""})).replace(W,"$1"),n,c<o&&Te(e.slice(c,o)),o<i&&Te(e=e.slice(o)),o<i&&ye(e))}d.push(n)}return be(d)}return ge.prototype=r.filters=r.pseudos,r.setFilters=new ge,s=ie.tokenize=function(e,t){var n,o,i,s,a,c,l,u=C[e+" "];if(u)return t?0:u.slice(0);for(a=e,c=[],l=r.preFilter;a;){for(s in n&&!(o=B.exec(a))||(o&&(a=a.slice(o[0].length)||a),c.push(i=[])),n=!1,(o=F.exec(a))&&(n=o.shift(),i.push({value:n,type:o[0].replace(W," ")}),a=a.slice(n.length)),r.filter)!(o=K[s].exec(a))||l[s]&&!(o=l[s](o))||(n=o.shift(),i.push({value:n,type:s,matches:o}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ie.error(e):C(e,c).slice(0)},a=ie.compile=function(e,t){var n,o=[],i=[],a=k[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=Te(t[n]))[x]?o.push(a):i.push(a);(a=k(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,s,a,c,u){var p,h,g,y=0,v="0",b=i&&[],x=[],w=l,E=i||o&&r.find.TAG("*",u),_=T+=null==w?1:Math.random()||.1,C=E.length;for(u&&(l=s===f||s||u);v!==C&&null!=(p=E[v]);v++){if(o&&p){for(h=0,s||p.ownerDocument===f||(d(p),a=!m);g=e[h++];)if(g(p,s||f,a)){c.push(p);break}u&&(T=_)}n&&((p=!g&&p)&&y--,i&&b.push(p))}if(y+=v,n&&v!==y){for(h=0;g=t[h++];)g(b,x,s,a);if(i){if(y>0)for(;v--;)b[v]||x[v]||(x[v]=A.call(c));x=xe(x)}O.apply(c,x),u&&!i&&x.length>0&&y+t.length>1&&ie.uniqueSort(c)}return u&&(T=_,l=w),b};return n?ae(i):i}(i,o))).selector=e}return a},c=ie.select=function(e,t,n,o){var i,c,l,u,p,d="function"==typeof e&&e,f=!o&&s(e=d.selector||e);if(n=n||[],1===f.length){if((c=f[0]=f[0].slice(0)).length>2&&"ID"===(l=c[0]).type&&9===t.nodeType&&m&&r.relative[c[1].type]){if(!(t=(r.find.ID(l.matches[0].replace(Z,ee),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(c.shift().value.length)}for(i=K.needsContext.test(e)?0:c.length;i--&&(l=c[i],!r.relative[u=l.type]);)if((p=r.find[u])&&(o=p(l.matches[0].replace(Z,ee),Q.test(c[0].type)&&me(t.parentNode)||t))){if(c.splice(i,1),!(e=o.length&&ye(c)))return O.apply(n,o),n;break}}return(d||a(e,f))(o,t,!m,n,!t||Q.test(e)&&me(t.parentNode)||t),n},n.sortStable=x.split("").sort(S).join("")===x,n.detectDuplicates=!!p,d(),n.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||le("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||le("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||le(P,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),ie}(n);E.find=k,E.expr=k.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=k.uniqueSort,E.text=k.getText,E.isXMLDoc=k.isXML,E.contains=k.contains,E.escapeSelector=k.escape;var S=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&E(e).is(n))break;r.push(e)}return r},D=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},j=E.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(e,t,n){return v(t)?E.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?E.grep(e,function(e){return e===t!==n}):"string"!=typeof t?E.grep(e,function(e){return p.call(t,e)>-1!==n}):E.filter(t,e,n)}E.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?E.find.matchesSelector(r,e)?[r]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<r;t++)if(E.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)E.find(e,o[t],n);return r>1?E.uniqueSort(n):n},filter:function(e){return this.pushStack(O(this,e||[],!1))},not:function(e){return this.pushStack(O(this,e||[],!0))},is:function(e){return!!O(this,"string"==typeof e&&j.test(e)?E(e):e||[],!1).length}});var I,$=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||I,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:$.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:s,!0)),N.test(r[1])&&E.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=s.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,I=E(s);var P=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function q(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,o=this.length,i=[],s="string"!=typeof e&&E(e);if(!j.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?E.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?p.call(E(e),this[0]):p.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return q(e,"nextSibling")},prev:function(e){return q(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return D((e.parentNode||{}).firstChild,e)},children:function(e){return D(e.firstChild)},contents:function(e){return A(e,"iframe")?e.contentDocument:(A(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},function(e,t){E.fn[e]=function(n,r){var o=E.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=E.filter(r,o)),this.length>1&&(L[e]||E.uniqueSort(o),P.test(e)&&o.reverse()),this.pushStack(o)}});var H=/[^\x20\t\r\n\f]+/g;function M(e){return e}function R(e){throw e}function W(e,t,n,r){var o;try{e&&v(o=e.promise)?o.call(e).done(t).fail(n):e&&v(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return E.each(e.match(H)||[],function(e,n){t[n]=!0}),t}(e):E.extend({},e);var t,n,r,o,i=[],s=[],a=-1,c=function(){for(o=o||e.once,r=t=!0;s.length;a=-1)for(n=s.shift();++a<i.length;)!1===i[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},l={add:function(){return i&&(n&&!t&&(a=i.length-1,s.push(n)),function t(n){E.each(n,function(n,r){v(r)?e.unique&&l.has(r)||i.push(r):r&&r.length&&"string"!==T(r)&&t(r)})}(arguments),n&&!t&&c()),this},remove:function(){return E.each(arguments,function(e,t){for(var n;(n=E.inArray(t,i,n))>-1;)i.splice(n,1),n<=a&&a--}),this},has:function(e){return e?E.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=s=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=s=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||c()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},E.extend({Deferred:function(e){var t=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return E.Deferred(function(n){E.each(t,function(t,r){var o=v(e[r[4]])&&e[r[4]];i[r[1]](function(){var e=o&&o.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(e,r,o){var i=0;function s(e,t,r,o){return function(){var a=this,c=arguments,l=function(){var n,l;if(!(e<i)){if((n=r.apply(a,c))===t.promise())throw new TypeError("Thenable self-resolution");l=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(l)?o?l.call(n,s(i,t,M,o),s(i,t,R,o)):(i++,l.call(n,s(i,t,M,o),s(i,t,R,o),s(i,t,M,t.notifyWith))):(r!==M&&(a=void 0,c=[n]),(o||t.resolveWith)(a,c))}},u=o?l:function(){try{l()}catch(n){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(n,u.stackTrace),e+1>=i&&(r!==R&&(a=void 0,c=[n]),t.rejectWith(a,c))}};e?u():(E.Deferred.getStackHook&&(u.stackTrace=E.Deferred.getStackHook()),n.setTimeout(u))}}return E.Deferred(function(n){t[0][3].add(s(0,n,v(o)?o:M,n.notifyWith)),t[1][3].add(s(0,n,v(e)?e:M)),t[2][3].add(s(0,n,v(r)?r:R))}).promise()},promise:function(e){return null!=e?E.extend(e,o):o}},i={};return E.each(t,function(e,n){var s=n[2],a=n[5];o[n[1]]=s.add,a&&s.add(function(){r=a},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=s.fireWith}),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=c.call(arguments),i=E.Deferred(),s=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?c.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(W(e,i.done(s(n)).resolve,i.reject,!t),"pending"===i.state()||v(o[n]&&o[n].then)))return i.then();for(;n--;)W(o[n],s(n),i.reject);return i.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&B.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){n.setTimeout(function(){throw e})};var F=E.Deferred();function U(){s.removeEventListener("DOMContentLoaded",U),n.removeEventListener("load",U),E.ready()}E.fn.ready=function(e){return F.then(e).catch(function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==e&&--E.readyWait>0||F.resolveWith(s,[E]))}}),E.ready.then=F.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(E.ready):(s.addEventListener("DOMContentLoaded",U),n.addEventListener("load",U));var z=function(e,t,n,r,o,i,s){var a=0,c=e.length,l=null==n;if("object"===T(n))for(a in o=!0,n)z(e,t,a,n[a],!0,i,s);else if(void 0!==r&&(o=!0,v(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(E(e),n)})),t))for(;a<c;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return o?e:l?t.call(e):c?t(e[0],n):i},X=/^-ms-/,K=/-([a-z])/g;function V(e,t){return t.toUpperCase()}function G(e){return e.replace(X,"ms-").replace(K,V)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function J(){this.expando=E.expando+J.uid++}J.uid=1,J.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[G(t)]=n;else for(r in t)o[G(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in r?[t]:t.match(H)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||E.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var Q=new J,Z=new J,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return Z.hasData(e)||Q.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),E.fn.extend({data:function(e,t){var n,r,o,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(o=Z.get(i),1===i.nodeType&&!Q.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=G(r.slice(5)),ne(i,r,o[r]));Q.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){Z.set(this,e)}):z(this,function(t){var n;if(i&&void 0===t)return void 0!==(n=Z.get(i,e))?n:void 0!==(n=ne(i,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),E.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),r=n.length,o=n.shift(),i=E._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,function(){E.dequeue(e,t)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:E.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),E.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?E.queue(this[0],e):void 0===t?this:this.each(function(){var n=E.queue(this,e,t);E._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&E.dequeue(this,e)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=E.Deferred(),i=this,s=this.length,a=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Q.get(i[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),o.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&E.contains(e.ownerDocument,e)&&"none"===E.css(e,"display")},ae=function(e,t,n,r){var o,i,s={};for(i in t)s[i]=e.style[i],e.style[i]=t[i];for(i in o=n.apply(e,r||[]),t)e.style[i]=s[i];return o};function ce(e,t,n,r){var o,i,s=20,a=r?function(){return r.cur()}:function(){return E.css(e,t,"")},c=a(),l=n&&n[3]||(E.cssNumber[t]?"":"px"),u=(E.cssNumber[t]||"px"!==l&&+c)&&oe.exec(E.css(e,t));if(u&&u[3]!==l){for(c/=2,l=l||u[3],u=+c||1;s--;)E.style(e,t,u+l),(1-i)*(1-(i=a()/c||.5))<=0&&(s=0),u/=i;u*=2,E.style(e,t,u+l),n=n||[]}return n&&(u=+u||+c||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=u,r.end=o)),o}var le={};function ue(e){var t,n=e.ownerDocument,r=e.nodeName,o=le[r];return o||(t=n.body.appendChild(n.createElement(r)),o=E.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),le[r]=o,o)}function pe(e,t){for(var n,r,o=[],i=0,s=e.length;i<s;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=Q.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&se(r)&&(o[i]=ue(r))):"none"!==n&&(o[i]="none",Q.set(r,"display",n)));for(i=0;i<s;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}E.fn.extend({show:function(){return pe(this,!0)},hide:function(){return pe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?E(this).show():E(this).hide()})}});var de=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,he=/^$|^module$|\/(?:java|ecma)script/i,me={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?E.merge([e],n):n}function ye(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}me.optgroup=me.option,me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td;var ve,be,xe=/<|&#?\w+;/;function we(e,t,n,r,o){for(var i,s,a,c,l,u,p=t.createDocumentFragment(),d=[],f=0,h=e.length;f<h;f++)if((i=e[f])||0===i)if("object"===T(i))E.merge(d,i.nodeType?[i]:i);else if(xe.test(i)){for(s=s||p.appendChild(t.createElement("div")),a=(fe.exec(i)||["",""])[1].toLowerCase(),c=me[a]||me._default,s.innerHTML=c[1]+E.htmlPrefilter(i)+c[2],u=c[0];u--;)s=s.lastChild;E.merge(d,s.childNodes),(s=p.firstChild).textContent=""}else d.push(t.createTextNode(i));for(p.textContent="",f=0;i=d[f++];)if(r&&E.inArray(i,r)>-1)o&&o.push(i);else if(l=E.contains(i.ownerDocument,i),s=ge(p.appendChild(i),"script"),l&&ye(s),n)for(u=0;i=s[u++];)he.test(i.type||"")&&n.push(i);return p}ve=s.createDocumentFragment().appendChild(s.createElement("div")),(be=s.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),ve.appendChild(be),y.checkClone=ve.cloneNode(!0).cloneNode(!0).lastChild.checked,ve.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!ve.cloneNode(!0).lastChild.defaultValue;var Te=s.documentElement,Ee=/^key/,_e=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function ke(){return!0}function Se(){return!1}function De(){try{return s.activeElement}catch(e){}}function je(e,t,n,r,o,i){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(r=r||n,n=void 0),t)je(e,a,n,r,t[a],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=Se;else if(!o)return e;return 1===i&&(s=o,(o=function(e){return E().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=E.guid++)),e.each(function(){E.event.add(this,t,o,r,n)})}E.event={global:{},add:function(e,t,n,r,o){var i,s,a,c,l,u,p,d,f,h,m,g=Q.get(e);if(g)for(n.handler&&(n=(i=n).handler,o=i.selector),o&&E.find.matchesSelector(Te,o),n.guid||(n.guid=E.guid++),(c=g.events)||(c=g.events={}),(s=g.handle)||(s=g.handle=function(t){return void 0!==E&&E.event.triggered!==t.type?E.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(H)||[""]).length;l--;)f=m=(a=Ce.exec(t[l])||[])[1],h=(a[2]||"").split(".").sort(),f&&(p=E.event.special[f]||{},f=(o?p.delegateType:p.bindType)||f,p=E.event.special[f]||{},u=E.extend({type:f,origType:m,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&E.expr.match.needsContext.test(o),namespace:h.join(".")},i),(d=c[f])||((d=c[f]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,r,h,s)||e.addEventListener&&e.addEventListener(f,s)),p.add&&(p.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,u):d.push(u),E.event.global[f]=!0)},remove:function(e,t,n,r,o){var i,s,a,c,l,u,p,d,f,h,m,g=Q.hasData(e)&&Q.get(e);if(g&&(c=g.events)){for(l=(t=(t||"").match(H)||[""]).length;l--;)if(f=m=(a=Ce.exec(t[l])||[])[1],h=(a[2]||"").split(".").sort(),f){for(p=E.event.special[f]||{},d=c[f=(r?p.delegateType:p.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=d.length;i--;)u=d[i],!o&&m!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(d.splice(i,1),u.selector&&d.delegateCount--,p.remove&&p.remove.call(e,u));s&&!d.length&&(p.teardown&&!1!==p.teardown.call(e,h,g.handle)||E.removeEvent(e,f,g.handle),delete c[f])}else for(f in c)E.event.remove(e,f+t[l],n,r,!0);E.isEmptyObject(c)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,s,a=E.event.fix(e),c=new Array(arguments.length),l=(Q.get(this,"events")||{})[a.type]||[],u=E.event.special[a.type]||{};for(c[0]=a,t=1;t<arguments.length;t++)c[t]=arguments[t];if(a.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,a)){for(s=E.event.handlers.call(this,a,l),t=0;(o=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(i.namespace)||(a.handleObj=i,a.data=i.data,void 0!==(r=((E.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,c))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,o,i,s,a=[],c=t.delegateCount,l=e.target;if(c&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(i=[],s={},n=0;n<c;n++)void 0===s[o=(r=t[n]).selector+" "]&&(s[o]=r.needsContext?E(o,this).index(l)>-1:E.find(o,this,null,[l]).length),s[o]&&i.push(r);i.length&&a.push({elem:l,handlers:i})}return l=this,c<t.length&&a.push({elem:l,handlers:t.slice(c)}),a},addProp:function(e,t){Object.defineProperty(E.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==De()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===De()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&A(this,"input"))return this.click(),!1},_default:function(e){return A(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ke:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ke,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ke,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ke,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ee.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&_e.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){E.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,o=e.handleObj;return r&&(r===this||E.contains(this,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),E.fn.extend({on:function(e,t,n,r){return je(this,e,t,n,r)},one:function(e,t,n,r){return je(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,E(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Se),this.each(function(){E.event.remove(this,e,n,t)})}});var Ae=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ne=/<script|<style|<link/i,Oe=/checked\s*(?:[^=]|=\s*.checked.)/i,Ie=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function $e(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Le(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function qe(e,t){var n,r,o,i,s,a,c,l;if(1===t.nodeType){if(Q.hasData(e)&&(i=Q.access(e),s=Q.set(t,i),l=i.events))for(o in delete s.handle,s.events={},l)for(n=0,r=l[o].length;n<r;n++)E.event.add(t,o,l[o][n]);Z.hasData(e)&&(a=Z.access(e),c=E.extend({},a),Z.set(t,c))}}function He(e,t,n,r){t=l.apply([],t);var o,i,s,a,c,u,p=0,d=e.length,f=d-1,h=t[0],m=v(h);if(m||d>1&&"string"==typeof h&&!y.checkClone&&Oe.test(h))return e.each(function(o){var i=e.eq(o);m&&(t[0]=h.call(this,o,i.html())),He(i,t,n,r)});if(d&&(i=(o=we(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(a=(s=E.map(ge(o,"script"),Pe)).length;p<d;p++)c=o,p!==f&&(c=E.clone(c,!0,!0),a&&E.merge(s,ge(c,"script"))),n.call(e[p],c,p);if(a)for(u=s[s.length-1].ownerDocument,E.map(s,Le),p=0;p<a;p++)c=s[p],he.test(c.type||"")&&!Q.access(c,"globalEval")&&E.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?E._evalUrl&&E._evalUrl(c.src):w(c.textContent.replace(Ie,""),u,c))}return e}function Me(e,t,n){for(var r,o=t?E.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||E.cleanData(ge(r)),r.parentNode&&(n&&E.contains(r.ownerDocument,r)&&ye(ge(r,"script")),r.parentNode.removeChild(r));return e}E.extend({htmlPrefilter:function(e){return e.replace(Ae,"<$1></$2>")},clone:function(e,t,n){var r,o,i,s,a,c,l,u=e.cloneNode(!0),p=E.contains(e.ownerDocument,e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(s=ge(u),r=0,o=(i=ge(e)).length;r<o;r++)a=i[r],c=s[r],void 0,"input"===(l=c.nodeName.toLowerCase())&&de.test(a.type)?c.checked=a.checked:"input"!==l&&"textarea"!==l||(c.defaultValue=a.defaultValue);if(t)if(n)for(i=i||ge(e),s=s||ge(u),r=0,o=i.length;r<o;r++)qe(i[r],s[r]);else qe(e,u);return(s=ge(u,"script")).length>0&&ye(s,!p&&ge(e,"script")),u},cleanData:function(e){for(var t,n,r,o=E.event.special,i=0;void 0!==(n=e[i]);i++)if(Y(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)o[r]?E.event.remove(n,r):E.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Me(this,e,!0)},remove:function(e){return Me(this,e)},text:function(e){return z(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return He(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||$e(this,e).appendChild(e)})},prepend:function(){return He(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=$e(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return z(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ne.test(e)&&!me[(fe.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return He(this,arguments,function(t){var n=this.parentNode;E.inArray(this,e)<0&&(E.cleanData(ge(this)),n&&n.replaceChild(t,this))},e)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){E.fn[e]=function(e){for(var n,r=[],o=E(e),i=o.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),E(o[s])[t](n),u.apply(r,n.get());return this.pushStack(r)}});var Re=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),We=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Be=new RegExp(ie.join("|"),"i");function Fe(e,t,n){var r,o,i,s,a=e.style;return(n=n||We(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||E.contains(e.ownerDocument,e)||(s=E.style(e,t)),!y.pixelBoxStyles()&&Re.test(s)&&Be.test(t)&&(r=a.width,o=a.minWidth,i=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=o,a.maxWidth=i)),void 0!==s?s+"":s}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Te.appendChild(l).appendChild(u);var e=n.getComputedStyle(u);r="1%"!==e.top,c=12===t(e.marginLeft),u.style.right="60%",a=36===t(e.right),o=36===t(e.width),u.style.position="absolute",i=36===u.offsetWidth||"absolute",Te.removeChild(l),u=null}}function t(e){return Math.round(parseFloat(e))}var r,o,i,a,c,l=s.createElement("div"),u=s.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===u.style.backgroundClip,E.extend(y,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),c},scrollboxSize:function(){return e(),i}}))}();var ze=/^(none|table(?!-c[ea]).+)/,Xe=/^--/,Ke={position:"absolute",visibility:"hidden",display:"block"},Ve={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],Ye=s.createElement("div").style;function Je(e){var t=E.cssProps[e];return t||(t=E.cssProps[e]=function(e){if(e in Ye)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;n--;)if((e=Ge[n]+t)in Ye)return e}(e)||e),t}function Qe(e,t,n){var r=oe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,o,i){var s="width"===t?1:0,a=0,c=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(c+=E.css(e,n+ie[s],!0,o)),r?("content"===n&&(c-=E.css(e,"padding"+ie[s],!0,o)),"margin"!==n&&(c-=E.css(e,"border"+ie[s]+"Width",!0,o))):(c+=E.css(e,"padding"+ie[s],!0,o),"padding"!==n?c+=E.css(e,"border"+ie[s]+"Width",!0,o):a+=E.css(e,"border"+ie[s]+"Width",!0,o));return!r&&i>=0&&(c+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-c-a-.5))),c}function et(e,t,n){var r=We(e),o=Fe(e,t,r),i="border-box"===E.css(e,"boxSizing",!1,r),s=i;if(Re.test(o)){if(!n)return o;o="auto"}return s=s&&(y.boxSizingReliable()||o===e.style[t]),("auto"===o||!parseFloat(o)&&"inline"===E.css(e,"display",!1,r))&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)],s=!0),(o=parseFloat(o)||0)+Ze(e,t,n||(i?"border":"content"),s,r,o)+"px"}function tt(e,t,n,r,o){return new tt.prototype.init(e,t,n,r,o)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,s,a=G(t),c=Xe.test(t),l=e.style;if(c||(t=Je(a)),s=E.cssHooks[t]||E.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,r))?o:l[t];"string"===(i=typeof n)&&(o=oe.exec(n))&&o[1]&&(n=ce(e,t,o),i="number"),null!=n&&n==n&&("number"===i&&(n+=o&&o[3]||(E.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(c?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var o,i,s,a=G(t);return Xe.test(t)||(t=Je(a)),(s=E.cssHooks[t]||E.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=Fe(e,t,r)),"normal"===o&&t in Ve&&(o=Ve[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),E.each(["height","width"],function(e,t){E.cssHooks[t]={get:function(e,n,r){if(n)return!ze.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,r):ae(e,Ke,function(){return et(e,t,r)})},set:function(e,n,r){var o,i=We(e),s="border-box"===E.css(e,"boxSizing",!1,i),a=r&&Ze(e,t,r,s,i);return s&&y.scrollboxSize()===i.position&&(a-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-Ze(e,t,"border",!1,i)-.5)),a&&(o=oe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=E.css(e,t)),Qe(0,n,a)}}}),E.cssHooks.marginLeft=Ue(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(e,t){E.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+ie[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(E.cssHooks[e+t].set=Qe)}),E.fn.extend({css:function(e,t){return z(this,function(e,t,n){var r,o,i={},s=0;if(Array.isArray(t)){for(r=We(e),o=t.length;s<o;s++)i[t[s]]=E.css(e,t[s],!1,r);return i}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,arguments.length>1)}}),E.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(E.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[E.cssProps[e.prop]]&&!E.cssHooks[e.prop]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=tt.prototype.init,E.fx.step={};var nt,rt,ot=/^(?:toggle|show|hide)$/,it=/queueHooks$/;function st(){rt&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(st):n.setTimeout(st,E.fx.interval),E.fx.tick())}function at(){return n.setTimeout(function(){nt=void 0}),nt=Date.now()}function ct(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ie[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function lt(e,t,n){for(var r,o=(ut.tweeners[t]||[]).concat(ut.tweeners["*"]),i=0,s=o.length;i<s;i++)if(r=o[i].call(n,t,e))return r}function ut(e,t,n){var r,o,i=0,s=ut.prefilters.length,a=E.Deferred().always(function(){delete c.elem}),c=function(){if(o)return!1;for(var t=nt||at(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n/l.duration||0),i=0,s=l.tweens.length;i<s;i++)l.tweens[i].run(r);return a.notifyWith(e,[l,r,n]),r<1&&s?n:(s||a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:E.extend({},t),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||at(),duration:n.duration,tweens:[],createTween:function(t,n){var r=E.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)l.tweens[n].run(1);return t?(a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l,t])):a.rejectWith(e,[l,t]),this}}),u=l.props;for(!function(e,t){var n,r,o,i,s;for(n in e)if(o=t[r=G(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(s=E.cssHooks[r])&&"expand"in s)for(n in i=s.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(u,l.opts.specialEasing);i<s;i++)if(r=ut.prefilters[i].call(l,e,u,l.opts))return v(r.stop)&&(E._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return E.map(u,lt,l),v(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),E.fx.timer(E.extend(c,{elem:e,anim:l,queue:l.opts.queue})),l}E.Animation=E.extend(ut,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(H);for(var n,r=0,o=e.length;r<o;r++)n=e[r],ut.tweeners[n]=ut.tweeners[n]||[],ut.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,s,a,c,l,u,p="width"in t||"height"in t,d=this,f={},h=e.style,m=e.nodeType&&se(e),g=Q.get(e,"fxshow");for(r in n.queue||(null==(s=E._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,E.queue(e,"fx").length||s.empty.fire()})})),t)if(o=t[r],ot.test(o)){if(delete t[r],i=i||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[r])continue;m=!0}f[r]=g&&g[r]||E.style(e,r)}if((c=!E.isEmptyObject(t))||!E.isEmptyObject(f))for(r in p&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=g&&g.display)&&(l=Q.get(e,"display")),"none"===(u=E.css(e,"display"))&&(l?u=l:(pe([e],!0),l=e.style.display||l,u=E.css(e,"display"),pe([e]))),("inline"===u||"inline-block"===u&&null!=l)&&"none"===E.css(e,"float")&&(c||(d.done(function(){h.display=l}),null==l&&(u=h.display,l="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),c=!1,f)c||(g?"hidden"in g&&(m=g.hidden):g=Q.access(e,"fxshow",{display:l}),i&&(g.hidden=!m),m&&pe([e],!0),d.done(function(){for(r in m||pe([e]),Q.remove(e,"fxshow"),f)E.style(e,r,f[r])})),c=lt(m?g[r]:0,r,d),r in g||(g[r]=c.start,m&&(c.end=c.start,c.start=0))}],prefilter:function(e,t){t?ut.prefilters.unshift(e):ut.prefilters.push(e)}}),E.speed=function(e,t,n){var r=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return E.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in E.fx.speeds?r.duration=E.fx.speeds[r.duration]:r.duration=E.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&E.dequeue(this,r.queue)},r},E.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=E.isEmptyObject(e),i=E.speed(t,n,r),s=function(){var t=ut(this,E.extend({},e),i);(o||Q.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",i=E.timers,s=Q.get(this);if(o)s[o]&&s[o].stop&&r(s[o]);else for(o in s)s[o]&&s[o].stop&&it.test(o)&&r(s[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||E.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Q.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=E.timers,s=r?r.length:0;for(n.finish=!0,E.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),E.each(["toggle","show","hide"],function(e,t){var n=E.fn[t];E.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ct(t,!0),e,r,o)}}),E.each({slideDown:ct("show"),slideUp:ct("hide"),slideToggle:ct("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){E.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),nt=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){rt||(rt=!0,st())},E.fx.stop=function(){rt=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(e,t){return e=E.fx&&E.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var o=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(o)}})},function(){var e=s.createElement("input"),t=s.createElement("select").appendChild(s.createElement("option"));e.type="checkbox",y.checkOn=""!==e.value,y.optSelected=t.selected,(e=s.createElement("input")).value="t",e.type="radio",y.radioValue="t"===e.value}();var pt,dt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return z(this,E.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?E.prop(e,t,n):(1===i&&E.isXMLDoc(e)||(o=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=E.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(H);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),function(e,t){var n=dt[t]||E.find.attr;dt[t]=function(e,t,r){var o,i,s=t.toLowerCase();return r||(i=dt[s],dt[s]=o,o=null!=n(e,t,r)?s:null,dt[s]=i),o}});var ft=/^(?:input|select|textarea|button)$/i,ht=/^(?:a|area)$/i;function mt(e){return(e.match(H)||[]).join(" ")}function gt(e){return e.getAttribute&&e.getAttribute("class")||""}function yt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(H)||[]}E.fn.extend({prop:function(e,t){return z(this,E.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&E.isXMLDoc(e)||(t=E.propFix[t]||t,o=E.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):ft.test(e.nodeName)||ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(e){var t,n,r,o,i,s,a,c=0;if(v(e))return this.each(function(t){E(this).addClass(e.call(this,t,gt(this)))});if((t=yt(e)).length)for(;n=this[c++];)if(o=gt(n),r=1===n.nodeType&&" "+mt(o)+" "){for(s=0;i=t[s++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(a=mt(r))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,o,i,s,a,c=0;if(v(e))return this.each(function(t){E(this).removeClass(e.call(this,t,gt(this)))});if(!arguments.length)return this.attr("class","");if((t=yt(e)).length)for(;n=this[c++];)if(o=gt(n),r=1===n.nodeType&&" "+mt(o)+" "){for(s=0;i=t[s++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(a=mt(r))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):v(e)?this.each(function(n){E(this).toggleClass(e.call(this,n,gt(this),t),t)}):this.each(function(){var t,o,i,s;if(r)for(o=0,i=E(this),s=yt(e);t=s[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=gt(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+mt(gt(n))+" ").indexOf(t)>-1)return!0;return!1}});var vt=/\r/g;E.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=v(e),this.each(function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,E(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=E.map(o,function(e){return null==e?"":e+""})),(t=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))})):o?(t=E.valHooks[o.type]||E.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(vt,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:mt(E.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,s="select-one"===e.type,a=s?null:[],c=s?i+1:o.length;for(r=i<0?c:s?i:0;r<c;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=E(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,r,o=e.options,i=E.makeArray(t),s=o.length;s--;)((r=o[s]).selected=E.inArray(E.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=E.inArray(E(e).val(),t)>-1}},y.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in n;var bt=/^(?:focusinfocus|focusoutblur)$/,xt=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,r,o){var i,a,c,l,u,p,d,f,m=[r||s],g=h.call(e,"type")?e.type:e,y=h.call(e,"namespace")?e.namespace.split("."):[];if(a=f=c=r=r||s,3!==r.nodeType&&8!==r.nodeType&&!bt.test(g+E.event.triggered)&&(g.indexOf(".")>-1&&(g=(y=g.split(".")).shift(),y.sort()),u=g.indexOf(":")<0&&"on"+g,(e=e[E.expando]?e:new E.Event(g,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=y.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:E.makeArray(t,[e]),d=E.event.special[g]||{},o||!d.trigger||!1!==d.trigger.apply(r,t))){if(!o&&!d.noBubble&&!b(r)){for(l=d.delegateType||g,bt.test(l+g)||(a=a.parentNode);a;a=a.parentNode)m.push(a),c=a;c===(r.ownerDocument||s)&&m.push(c.defaultView||c.parentWindow||n)}for(i=0;(a=m[i++])&&!e.isPropagationStopped();)f=a,e.type=i>1?l:d.bindType||g,(p=(Q.get(a,"events")||{})[e.type]&&Q.get(a,"handle"))&&p.apply(a,t),(p=u&&a[u])&&p.apply&&Y(a)&&(e.result=p.apply(a,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(m.pop(),t)||!Y(r)||u&&v(r[g])&&!b(r)&&((c=r[u])&&(r[u]=null),E.event.triggered=g,e.isPropagationStopped()&&f.addEventListener(g,xt),r[g](),e.isPropagationStopped()&&f.removeEventListener(g,xt),E.event.triggered=void 0,c&&(r[u]=c)),e.result}},simulate:function(e,t,n){var r=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(r,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),y.focusin||E.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){E.event.simulate(t,e.target,E.event.fix(e))};E.event.special[t]={setup:function(){var r=this.ownerDocument||this,o=Q.access(r,t);o||r.addEventListener(e,n,!0),Q.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this,o=Q.access(r,t)-1;o?Q.access(r,t,o):(r.removeEventListener(e,n,!0),Q.remove(r,t))}}});var wt=n.location,Tt=Date.now(),Et=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var _t=/\[\]$/,Ct=/\r?\n/g,kt=/^(?:submit|button|image|reset|file)$/i,St=/^(?:input|select|textarea|keygen)/i;function Dt(e,t,n,r){var o;if(Array.isArray(t))E.each(t,function(t,o){n||_t.test(e)?r(e,o):Dt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)});else if(n||"object"!==T(t))r(e,t);else for(o in t)Dt(e+"["+o+"]",t[o],n,r)}E.param=function(e,t){var n,r=[],o=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){o(this.name,this.value)});else for(n in e)Dt(n,e[n],t,o);return r.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&St.test(this.nodeName)&&!kt.test(e)&&(this.checked||!de.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(Ct,"\r\n")}}):{name:t.name,value:n.replace(Ct,"\r\n")}}).get()}});var jt=/%20/g,At=/#.*$/,Nt=/([?&])_=[^&]*/,Ot=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:GET|HEAD)$/,$t=/^\/\//,Pt={},Lt={},qt="*/".concat("*"),Ht=s.createElement("a");function Mt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(H)||[];if(v(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Rt(e,t,n,r){var o={},i=e===Lt;function s(a){var c;return o[a]=!0,E.each(e[a]||[],function(e,a){var l=a(t,n,r);return"string"!=typeof l||i||o[l]?i?!(c=l):void 0:(t.dataTypes.unshift(l),s(l),!1)}),c}return s(t.dataTypes[0])||!o["*"]&&s("*")}function Wt(e,t){var n,r,o=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&E.extend(!0,e,r),e}Ht.href=wt.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,E.ajaxSettings),t):Wt(E.ajaxSettings,e)},ajaxPrefilter:Mt(Pt),ajaxTransport:Mt(Lt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,o,i,a,c,l,u,p,d,f,h=E.ajaxSetup({},t),m=h.context||h,g=h.context&&(m.nodeType||m.jquery)?E(m):E.event,y=E.Deferred(),v=E.Callbacks("once memory"),b=h.statusCode||{},x={},w={},T="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(u){if(!a)for(a={};t=Ot.exec(i);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?i:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)_.always(e[_.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||T;return r&&r.abort(t),C(0,t),this}};if(y.promise(_),h.url=((e||h.url||wt.href)+"").replace($t,wt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(H)||[""],null==h.crossDomain){l=s.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Ht.protocol+"//"+Ht.host!=l.protocol+"//"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=E.param(h.data,h.traditional)),Rt(Pt,h,t,_),u)return _;for(d in(p=E.event&&h.global)&&0==E.active++&&E.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!It.test(h.type),o=h.url.replace(At,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(jt,"+")):(f=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(Et.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Nt,"$1"),f=(Et.test(o)?"&":"?")+"_="+Tt+++f),h.url=o+f),h.ifModified&&(E.lastModified[o]&&_.setRequestHeader("If-Modified-Since",E.lastModified[o]),E.etag[o]&&_.setRequestHeader("If-None-Match",E.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&_.setRequestHeader("Content-Type",h.contentType),_.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+qt+"; q=0.01":""):h.accepts["*"]),h.headers)_.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(m,_,h)||u))return _.abort();if(T="abort",v.add(h.complete),_.done(h.success),_.fail(h.error),r=Rt(Lt,h,t,_)){if(_.readyState=1,p&&g.trigger("ajaxSend",[_,h]),u)return _;h.async&&h.timeout>0&&(c=n.setTimeout(function(){_.abort("timeout")},h.timeout));try{u=!1,r.send(x,C)}catch(e){if(u)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,s,a){var l,d,f,x,w,T=t;u||(u=!0,c&&n.clearTimeout(c),r=void 0,i=a||"",_.readyState=e>0?4:0,l=e>=200&&e<300||304===e,s&&(x=function(e,t,n){for(var r,o,i,s,a=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in a)if(a[o]&&a[o].test(r)){c.unshift(o);break}if(c[0]in n)i=c[0];else{for(o in n){if(!c[0]||e.converters[o+" "+c[0]]){i=o;break}s||(s=o)}i=i||s}if(i)return i!==c[0]&&c.unshift(i),n[i]}(h,_,s)),x=function(e,t,n,r){var o,i,s,a,c,l={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(i=u.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!c&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=i,i=u.shift())if("*"===i)i=c;else if("*"!==c&&c!==i){if(!(s=l[c+" "+i]||l["* "+i]))for(o in l)if((a=o.split(" "))[1]===i&&(s=l[c+" "+a[0]]||l["* "+a[0]])){!0===s?s=l[o]:!0!==l[o]&&(i=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+c+" to "+i}}}return{state:"success",data:t}}(h,x,_,l),l?(h.ifModified&&((w=_.getResponseHeader("Last-Modified"))&&(E.lastModified[o]=w),(w=_.getResponseHeader("etag"))&&(E.etag[o]=w)),204===e||"HEAD"===h.type?T="nocontent":304===e?T="notmodified":(T=x.state,d=x.data,l=!(f=x.error))):(f=T,!e&&T||(T="error",e<0&&(e=0))),_.status=e,_.statusText=(t||T)+"",l?y.resolveWith(m,[d,T,_]):y.rejectWith(m,[_,T,f]),_.statusCode(b),b=void 0,p&&g.trigger(l?"ajaxSuccess":"ajaxError",[_,h,l?d:f]),v.fireWith(m,[_,T]),p&&(g.trigger("ajaxComplete",[_,h]),--E.active||E.event.trigger("ajaxStop")))}return _},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],function(e,t){E[t]=function(e,n,r,o){return v(n)&&(o=o||r,r=n,n=void 0),E.ajax(E.extend({url:e,type:t,dataType:o,data:n,success:r},E.isPlainObject(e)&&e))}}),E._evalUrl=function(e){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return v(e)?this.each(function(t){E(this).wrapInner(e.call(this,t))}):this.each(function(){var t=E(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=v(e);return this.each(function(n){E(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Bt={0:200,1223:204},Ft=E.ajaxSettings.xhr();y.cors=!!Ft&&"withCredentials"in Ft,y.ajax=Ft=!!Ft,E.ajaxTransport(function(e){var t,r;if(y.cors||Ft&&!e.crossDomain)return{send:function(o,i){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);t=function(e){return function(){t&&(t=r=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?i(0,"error"):i(a.status,a.statusText):i(Bt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),r=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),E.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),E.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,o){t=E("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),s.head.appendChild(t[0])},abort:function(){n&&n()}}});var Ut,zt=[],Xt=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=zt.pop()||E.expando+"_"+Tt++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",function(e,t,r){var o,i,s,a=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Xt,"$1"+o):!1!==e.jsonp&&(e.url+=(Et.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||E.error(o+" was not called"),s[0]},e.dataTypes[0]="json",i=n[o],n[o]=function(){s=arguments},r.always(function(){void 0===i?E(n).removeProp(o):n[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,zt.push(o)),s&&v(i)&&i(s[0]),s=i=void 0}),"script"}),y.createHTMLDocument=((Ut=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ut.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((r=(t=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,t.head.appendChild(r)):t=s),o=N.exec(e),i=!n&&[],o?[t.createElement(o[1])]:(o=we([e],t,i),i&&i.length&&E(i).remove(),E.merge([],o.childNodes)));var r,o,i},E.fn.load=function(e,t,n){var r,o,i,s=this,a=e.indexOf(" ");return a>-1&&(r=mt(e.slice(a)),e=e.slice(0,a)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&E.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){i=arguments,s.html(r?E("<div>").append(E.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){E.fn[t]=function(e){return this.on(t,e)}}),E.expr.pseudos.animated=function(e){return E.grep(E.timers,function(t){return e===t.elem}).length},E.offset={setOffset:function(e,t,n){var r,o,i,s,a,c,l=E.css(e,"position"),u=E(e),p={};"static"===l&&(e.style.position="relative"),a=u.offset(),i=E.css(e,"top"),c=E.css(e,"left"),("absolute"===l||"fixed"===l)&&(i+c).indexOf("auto")>-1?(s=(r=u.position()).top,o=r.left):(s=parseFloat(i)||0,o=parseFloat(c)||0),v(t)&&(t=t.call(e,n,E.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+o),"using"in t?t.using.call(e,p):u.css(p)}},E.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){E.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===E.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),o.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-E.css(r,"marginTop",!0),left:t.left-o.left-E.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||Te})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;E.fn[e]=function(r){return z(this,function(e,r,o){var i;if(b(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o},e,r,arguments.length)}}),E.each(["top","left"],function(e,t){E.cssHooks[t]=Ue(y.pixelPosition,function(e,n){if(n)return n=Fe(e,t),Re.test(n)?E(e).position()[t]+"px":n})}),E.each({Height:"height",Width:"width"},function(e,t){E.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){E.fn[r]=function(o,i){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===i?"margin":"border");return z(this,function(t,n,o){var i;return b(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?E.css(t,n,a):E.style(t,n,o,a)},t,s?o:void 0,s)}})}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){E.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),E.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),E.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=c.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(c.call(arguments)))}).guid=e.guid=e.guid||E.guid++,o},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=A,E.isFunction=v,E.isWindow=b,E.camelCase=G,E.type=T,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return E}.apply(t,[]))||(e.exports=r);var Kt=n.jQuery,Vt=n.$;return E.noConflict=function(e){return n.$===E&&(n.$=Vt),e&&n.jQuery===E&&(n.jQuery=Kt),E},o||(n.jQuery=n.$=E),E})},"./src/bg-sound.mp3":function(e,t,n){e.exports=n.p+"ee93526d22ec837c95163e83e3a51ea5.mp3"},"./src/components/bot-component/bot.css":function(e,t){},"./src/components/bot-component/bot.html":function(e,t){e.exports='<section class="character-bot" id=\'bot\'>\r\n  <div class="character-bot-weapon"></div>\r\n  <div class="character-bot-left-hand"></div>\r\n  <div class="character-bot-left-leg"></div>\r\n  <div class="character-bot-right-leg"></div>\r\n  <div class="character-bot-body"></div>\r\n  <div class="character-bot-head"></div>\r\n  <div class="character-bot-right-hand"></div>\r\n</section>\r\n'},"./src/components/bot-component/character-sprite.png":function(e,t,n){e.exports=n.p+"d7eb73709cfb02bd054853a75feb0298.png"},"./src/components/dialog-window-component/dialog-window-bg.jpg":function(e,t,n){e.exports=n.p+"e36931ddc7793e768bd20a38a715fc4f.jpg"},"./src/components/dialog-window-component/dialog-window.css":function(e,t){},"./src/components/dialog-window-component/dialog-window.html":function(e,t){e.exports='<div class="dialog-window" id="dialog">\r\n\r\n</div>\r\n'},"./src/components/index.js":function(e,t,n){"use strict";var r=new class{constructor(e){this.canvasClass=e}addToCanvas(e){$(`.${this.canvasClass}`).append(e)}setRandomNumber(e,t){return Math.floor(Math.random()*(t-e+1))+e}}("game-canvas"),o=(n("./src/components/dialog-window-component/dialog-window-bg.jpg"),n("./src/components/dialog-window-component/dialog-window.html")),i=n.n(o),s=n("./src/components/dialog-window-component/dialog-window.css"),a=n.n(s);const c=new class{constructor(e){this.elId=e,this.template="",this.style=""}show(e){$(`#${this.elId}`).append(e).show()}hide(){$(`#${this.elId}`).hide().empty()}}("dialog");c.template=i.a,c.style=a.a;var l=c,u=n("./src/components/login-component/login.html"),p=n.n(u),d=n("./src/components/login-component/login.css"),f=n.n(d);const h=new class{constructor(e){this.elId=e,this.template="",this.style=""}run(){this.addSubmitEvent()}addSubmitEvent(){$(`#${this.elId}`).submit(()=>{de.player.name=$("#login-name").val(),de.dialogWindow.hide(),de.round.run()})}}("login-form");h.template=p.a,h.style=f.a;var m=h,g=n("./src/components/player-component/player.html"),y=n.n(g),v=n("./src/components/player-component/player.css"),b=n.n(v);var x=class{constructor(e,t){this.name="",this.hp=100,this.score=0,this.template="",this.style="",this.nameElId=e,this.modelElId=t}setPlayerName(){$(`#${this.nameElId}`).text(`${this.name}`)}renderModel(){r.addToCanvas(this.template)}getDamage(e){this.hp-=e.damage/2}restoreHp(){this.hp=100}};n("./src/components/player-component/character-sprite.png");const w=new x("player-name","player");w.template=y.a,w.style=b.a;var T=w,E=n("./src/components/round-component/round.html"),_=n.n(E),C=n("./src/components/round-component/round.css"),k=n.n(C);const S=new class{constructor(e){this.idElement=e,this.number=0,this.template="",this.style="",this.playerHpBarId="player-hp",this.botHpBarId="bot-hp"}run(){this.clear(),this.number++,this.renderAll(),de.turn.run()}clear(){$("#game-stats").remove(),$(`#${de.player.modelElId}`).remove(),$(`#${de.bot.modelElId}`).remove()}renderAll(){this.renderRoundInfo(),de.player.setPlayerName(),de.bot.setBotName(),de.player.renderModel(),de.bot.renderModel()}setRoundNumber(){$(`#${this.idElement}`).text(`${this.number}`)}renderRoundInfo(){de.utility.addToCanvas(this.template),this.setRoundNumber(),this.setHpToBar()}setHpToBar(){$(`#${this.playerHpBarId}`).attr("data-hp",de.player.hp),$(`#${this.playerHpBarId}`).animate({width:`${de.player.hp}%`},1500),$(`#${this.botHpBarId}`).attr("data-hp",de.bot.hp),$(`#${this.botHpBarId}`).animate({width:`${de.bot.hp}%`},1500)}}("round-number");S.template=_.a,S.style=k.a;var D=S,j=n("./src/components/bot-component/bot.html"),A=n.n(j),N=n("./src/components/bot-component/bot.css"),O=n.n(N);var I=class{constructor(e,t){this.name=`${["Angry","Stupid","Lazy","Strong","Slow"][r.setRandomNumber(0,4)]} ${["Viking","Legioner","Berserk","Scout","Veteran"][r.setRandomNumber(0,4)]} ${["John","Khan","Mike","Ivan","Conor"][r.setRandomNumber(0,4)]}`,this.hp=100,this.score=0,this.template="",this.style="",this.nameElId=e,this.modelElId=t}restoreHp(){this.hp=100}setBotName(){$(`#${this.nameElId}`).text(`${this.name}`)}renderModel(){r.addToCanvas(this.template);const e=[$(".character-bot-head"),$(".character-bot-body"),$(".character-bot-left-hand"),$(".character-bot-weapon"),$(".character-bot-right-hand"),$(".character-bot-left-leg"),$(".character-bot-right-leg")],t=[20,41,28,-8,62,39,56],n=[0,73,160,189,118,255,288];for(let o=0;o<7;o++){let i=`${-t[o]-103*r.setRandomNumber(0,2)}px ${-n[o]}px`;e[o].css("background-position",i)}}getDamage(e){this.hp-=e.damage}};n("./src/components/bot-component/character-sprite.png");const P=new I("bot-name","bot");P.template=A.a,P.style=O.a;var L=P,q=n("./src/components/turn-component/turn.html"),H=n.n(q),M=n("./src/components/turn-component/turn.css"),R=n.n(M);const W=new class{constructor(){this.isPlayerTurn=!0,this.template="",this.style=""}run(){this.isPlayerTurn?de.spell.renderSpellOptions():(de.spell.setRandomSpell(),de.spell.animateSpell())}isDead(){$(`#${de.spell.selectedSpell.idEl}`).remove(),de.bot.hp<0?(de.dialogWindow.show(`You won ${de.bot.name}! Ready for next round!`),setTimeout(()=>{de.dialogWindow.hide(),de.player.score+=100,de.bot.restoreHp(),de.player.restoreHp(),de.round.run()},2e3)):de.player.hp<0?(de.player.score+=100-de.bot.hp,de.scoreTable.saveScore(de.player),setTimeout(()=>{de.scoreTable.renderTable(),de.dialogWindow.show(de.scoreTable.template)},2e3)):(this.isPlayerTurn?de.dialogWindow.show(`Turn: ${de.bot.name}`):de.dialogWindow.show(`Turn: ${de.player.name}`),setTimeout(()=>{de.dialogWindow.hide(),this.isPlayerTurn=!this.isPlayerTurn,this.run()},2e3))}};W.template=H.a,W.style=R.a;var B=W,F=n("./src/components/math-task-component/math-task.html"),U=n.n(F),z=n("./src/components/math-task-component/math-task.css"),X=n.n(z);const K=new(n("./src/components/math-task-component/math-task.js").a)("math-task-form");K.template=U.a,K.style=X.a;var V=K,G=n("./src/components/spell-component/spell.html"),Y=n.n(G),J=n("./src/components/spell-component/spell.css"),Q=n.n(J),Z=(n("./src/components/spell-component/water-spell.png"),n("./src/components/spell-component/fire-spell.png"),n("./src/components/spell-component/water-spell.html")),ee=n.n(Z),te=n("./src/components/spell-component/fire-spell.html"),ne=n.n(te);const re=new class{constructor(){this.template="",this.style="",this.spellList={"water spell":{name:"water spell",damage:30,template:ee.a,animationName:"water-spell",idEl:"water-blast",soundId:"water-sound"},"fire spell":{name:"fire spell",damage:30,template:ne.a,animationName:"fire-spell",idEl:"fire-blast",soundId:"fire-sound"}},this.selectedSpell,this.target}renderSpellOptions(){de.dialogWindow.show(this.template),this.bindEvent()}setRandomSpell(){const e=de.utility.setRandomNumber(0,1);this.selectedSpell=0===e?this.spellList["water spell"]:this.spellList["fire spell"]}bindEvent(){$(".spell-icon").click(e=>this.setUserChoice(e))}setUserChoice(e){let t=e.target;for(;!$(t).is("[data-name]");)t=$(t).parent();this.selectedSpell=this.spellList[$(t).attr("data-name")],de.dialogWindow.hide(),de.mathTask.renderTask()}animateSpell(){const e=this;de.turn.isPlayerTurn?this.target=de.bot:this.target=de.player,de.utility.addToCanvas(this.selectedSpell.template),$(`#${this.selectedSpell.soundId}`).get(0).play(),$(`#${this.selectedSpell.idEl}`).on("animationend",()=>{$(`#${this.selectedSpell.idEl}`).remove(),e.target.getDamage(e.selectedSpell),de.round.setHpToBar(),de.turn.isDead()}),$(`#${this.selectedSpell.idEl}`).offset({left:$(`#${this.target.modelElId}`).offset().left+$(`#${this.target.modelElId}`).width()/2,top:$(`#${this.target.modelElId}`).offset().top}),$(`#${this.selectedSpell.idEl}`).css("animation",`${this.selectedSpell.animationName} 1.5s steps(14) 0s 1 normal forwards running`)}};re.template=Y.a,re.style=Q.a;var oe=re,ie=n("./src/components/score-table-component/score-table.html"),se=n.n(ie),ae=n("./src/components/score-table-component/score-table.css"),ce=n.n(ae);const le=new class{constructor(e){this.idElement=e,this.template="",this.style="",this.scoreInfo=[]}saveScore(e){const t={};t.name=e.name,t.score=e.score,this.scoreInfo.push(t),localStorage.setItem("score",JSON.stringify(this.scoreInfo)),this.loadFromStorage(),this.scoreInfo=this.sortTopFive()}loadFromStorage(){this.scoreInfo=JSON.parse(localStorage.getItem("score"))}sortTopFive(){let e=this.scoreInfo.slice();return e.sort((e,t)=>parseInt(t.score)-parseInt(e.score)),e.length>=5&&(e.length=5),e}renderTable(){let e="";for(let t=0;t<this.scoreInfo.length;t++)e+=`<tr><td>${this.scoreInfo[t].name}</td><td>${this.scoreInfo[t].score}</td></tr>`;this.template=this.template.replace(/tbody/gi,`<tbody>${e}</tbody>`)}}("top-ten-score");le.template=se.a,le.style=ce.a;var ue=le;const pe={};pe.utility=r,pe.dialogWindow=l,pe.login=m,pe.player=T,pe.round=D,pe.bot=L,pe.turn=B,pe.mathTask=V,pe.spell=oe,pe.scoreTable=ue;var de=t.a=pe},"./src/components/login-component/login.css":function(e,t){},"./src/components/login-component/login.html":function(e,t){e.exports='<form class="login-cont" id="login-form" action="" method="post" onsubmit="return false">\r\n  <p class="form-title">Welcome to Game!</p>\r\n  <input class="form-field" id="login-name" type="text" name="" value="" placeholder="Enter your Name..." required>\r\n  <input class="submit-btn" type="submit" name="" value="Start Game">\r\n</form>\r\n'},"./src/components/math-task-component/correct.mp3":function(e,t,n){e.exports=n.p+"f2b9e924d3ba8cb074b1d5b9cd79e47a.mp3"},"./src/components/math-task-component/incorrect.mp3":function(e,t,n){e.exports=n.p+"99e9b76bc612d595edbaeef3c87dc18f.mp3"},"./src/components/math-task-component/math-task.css":function(e,t){},"./src/components/math-task-component/math-task.html":function(e,t){e.exports='<form class="math-task-cont" id="math-task-form" action="" method="post" onsubmit="return false">\r\n  <p class="form-title">If you want to cast spell, try solve this task:</p>\r\n  <label for="math-task-answer" id="math-task-text"></label>\r\n  <input class="form-field math-task-answer-field" id="math-task-answer" type="number" name="" value="" placeholder="?" required>\r\n  <input class="submit-btn" type="submit" name="" value="Submit Answer">\r\n  <div class="task-massage">\r\n    <span class="correct-massage">correct answer!</span>\r\n    <span class="wrong-massage">wrong answer!</span>\r\n    <audio id="correct-sound" src="./correct.mp3" preload="auto"></audio>\r\n    <audio id="incorrect-sound" src="./incorrect.mp3" preload="auto"></audio>\r\n  </div>\r\n</form>\r\n'},"./src/components/math-task-component/math-task.js":function(module,__webpack_exports__,__webpack_require__){"use strict";var _index__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/index.js"),_correct_mp3__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/math-task-component/correct.mp3"),_correct_mp3__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_correct_mp3__WEBPACK_IMPORTED_MODULE_1__),_incorrect_mp3__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/math-task-component/incorrect.mp3"),_incorrect_mp3__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(_incorrect_mp3__WEBPACK_IMPORTED_MODULE_2__);class MathTask{constructor(e){this.formElId=e,this.mathSigns=["+","-","/","*"],this.taskText="",this.answer="",this.template="",this.style="",this.correctSoundId="correct-sound",this.incorrectSoundId="incorrect-sound"}generat(){const a=_index__WEBPACK_IMPORTED_MODULE_0__.a.utility.setRandomNumber(0,9),b=_index__WEBPACK_IMPORTED_MODULE_0__.a.utility.setRandomNumber(0,9),mathOperation=this.mathSigns[_index__WEBPACK_IMPORTED_MODULE_0__.a.utility.setRandomNumber(0,3)];this.taskText=`${a} ${mathOperation} ${b}`,this.answer=eval(this.taskText),this.taskText+=" = ",Number.isInteger(this.answer/1)||this.generat()}renderTask(){this.generat(),_index__WEBPACK_IMPORTED_MODULE_0__.a.dialogWindow.show(this.template),this.bindEvent(),$("#math-task-text").text(this.taskText)}getAnswer(){return $("#math-task-answer").val()}checkAnswer(){$(`#${this.formElId} .submit-btn`).prop("disabled",!0),this.getAnswer()===`${this.answer}`?($(`#${this.correctSoundId}`).get(0).play(),$(".correct-massage").show().delay(1e3).queue(()=>{_index__WEBPACK_IMPORTED_MODULE_0__.a.dialogWindow.hide(),_index__WEBPACK_IMPORTED_MODULE_0__.a.spell.animateSpell()})):($(`#${this.incorrectSoundId}`).get(0).play(),$(".wrong-massage").show().delay(1e3).queue(()=>{_index__WEBPACK_IMPORTED_MODULE_0__.a.dialogWindow.hide(),_index__WEBPACK_IMPORTED_MODULE_0__.a.turn.isPlayerTurn=!_index__WEBPACK_IMPORTED_MODULE_0__.a.turn.isPlayerTurn,_index__WEBPACK_IMPORTED_MODULE_0__.a.turn.run()}))}bindEvent(){$(`#${this.formElId}`).submit(()=>this.checkAnswer())}}__webpack_exports__.a=MathTask},"./src/components/player-component/character-sprite.png":function(e,t,n){e.exports=n.p+"d7eb73709cfb02bd054853a75feb0298.png"},"./src/components/player-component/player.css":function(e,t){},"./src/components/player-component/player.html":function(e,t){e.exports='<section class="character-player" id=\'player\'>\r\n  <div class="character-player-left-leg"></div>\r\n  <div class="character-player-right-leg"></div>\r\n  <div class="character-player-right-hand"></div>\r\n  <div class="character-player-body"></div>\r\n  <div class="character-player-head"></div>\r\n  <div class="character-player-left-hand"></div>\r\n</section>\r\n'},"./src/components/round-component/round.css":function(e,t){},"./src/components/round-component/round.html":function(e,t){e.exports='<div class="game-header" id="game-stats">\r\n  <section class="stats player-stats">\r\n    <span class="header-name" id="player-name"></span>\r\n    <div class="progress-bar-empty">\r\n      <div class="progress-bar" id="player-hp" data-hp="100"></div>\r\n    </div>\r\n  </section>\r\n  <section class="round-info">\r\n    <span class="game-round">Round <span class="game-round-num" id="round-number"></span></span>\r\n  </section>\r\n  <section class="stats bot-stats">\r\n    <span class="header-name" id="bot-name"></span>\r\n    <div class="progress-bar-empty">\r\n      <div class="progress-bar right" id="bot-hp" data-hp="100"></div>\r\n    </div>\r\n  </section>\r\n</div>\r\n'},"./src/components/score-table-component/score-table.css":function(e,t){},"./src/components/score-table-component/score-table.html":function(e,t){e.exports="<table class=\"score-table\" id='top-ten-score'>\r\n  <caption>Table score</caption>\r\n  <thead>\r\n    <th>Name</th>\r\n    <th>Score</th>\r\n  </thead>\r\n  tbody\r\n</table>\r\n"},"./src/components/spell-component/fire-spell.html":function(e,t){e.exports='<div class="fire-spell-cont" id="fire-blast">\r\n  <audio id="fire-sound" src="./fire.mp3" preload="auto"></audio>\r\n</div>\r\n'},"./src/components/spell-component/fire-spell.png":function(e,t,n){e.exports=n.p+"c267ef4363c40945df8d8fcc18b2d1ef.png"},"./src/components/spell-component/spell.css":function(e,t){},"./src/components/spell-component/spell.html":function(e,t){e.exports='<section class="spell-section">\r\n  <p>Choose Your spell!</p>\r\n  <ul class="spell-list">\r\n    <li class="spell-icon">\r\n      <img src="./spell-icon-1.jpg" alt="Water Spell" title="Water Spell" data-name="water spell" />\r\n    </li>\r\n    <li class="spell-icon">\r\n      <img src="./spell-icon-2.jpg" alt="Fire Spell" title="Fire Spell" data-name="fire spell" />\r\n    </li>\r\n  </ul>\r\n</section>\r\n'},"./src/components/spell-component/water-spell.html":function(e,t){e.exports='<div class="water-spell-cont" id="water-blast">\r\n  <audio id="water-sound" src="./water.mp3" preload="auto"></audio>\r\n</div>\r\n'},"./src/components/spell-component/water-spell.png":function(e,t,n){e.exports=n.p+"7fb29f45721688c097e6574b58788e9f.png"},"./src/components/turn-component/turn.css":function(e,t){},"./src/components/turn-component/turn.html":function(e,t){e.exports=""},"./src/css/reset.css":function(e,t){},"./src/css/style.css":function(e,t){},"./src/img/game-field.jpg":function(e,t,n){e.exports=n.p+"1bf7527236f01be3f2660c0beb8279e2.jpg"},"./src/index.html":function(e,t){e.exports='<div class="game-canvas">\n</div>\n'},"./src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/jquery/dist/jquery.js"),o=n.n(r),i=(n("./src/css/reset.css"),n("./src/css/style.css"),n("./src/index.html")),s=n.n(i),a=(n("./src/img/game-field.jpg"),n("./src/components/index.js")),c=n("./src/bg-sound.mp3"),l=n.n(c);var u=new class{constructor(){}run(){o()("body").append(s.a),o()(".game-canvas").ready(()=>{const e=document.createElement("iframe");o()("body").append(e),e.src=l.a,o()(e).attr({allow:"autoplay",loop:"true"})}),a.a.scoreTable.scoreInfo=JSON.parse(localStorage.getItem("score"))||[],a.a.utility.addToCanvas(a.a.dialogWindow.template),a.a.dialogWindow.show(a.a.login.template),a.a.login.run()}};window.$=window.jQuery=n("./node_modules/jquery/dist/jquery.js"),u.run()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,